********
数字电路
********

1 逻辑代数基础
==============


数制与码制
----------

十进制小数转化为二进制满足下面的规则：对于一个十进制小数 :math:`(S)_{10}` ，满足

.. math::
  \begin{align*}
      (S)_{10} = k_{-1}2^{-1} + k_{-2}2^{-2} + \cdots + k_{-m}2^{-m}
  \end{align*}

将上式两边同乘以 :math:`2` 得到

.. math::
  \begin{align*}
      2(S)_{10} = k_{-1} + (k_{-2}2^{-1} + k_{-3}2^{-2} + \cdots + k_{-m}2^{-m + 1})
  \end{align*}

上式说明，将小数 :math:`(S)_{10}` 乘以 :math:`2` 所得乘积的整数部分即 :math:`k_{-1}` 。以此类推，将每次乘 :math:`2` 后所得乘积的小数部分再乘以 :math:`2` ，便可求出二进制小数的每一位了。



对于有效数字（不包括符号位）为 :math:`n` 位的二进制数 :math:`N` ，它的补码 :math:`(N)_{\text{COMP}}` 表示方法为

.. math::
  \begin{align*}
      (N)_{\text{COMP}} = 
      \left\{\begin{array}{cc}
          N & \text{（当）}N\text{为正数} \\
          2^{n} - N & \text{（当）}N\text{为负数}
      \end{array}\right.
  \end{align*}

即正数（当符号位为 :math:`0` 时）的补码与原码相同，负数（当符号位为 :math:`1` 时）的补码等于 :math:`2^{n} - N` 。符号位保持不变。

二进制 :math:`N` 的反码 :math:`(N)_{\text{INV}}` 定义为

.. math::
  \begin{align*}
      (N)_{\text{INV}} = 
      \left\{\begin{array}{cc}
          N & \text{（当）}N\text{为正数} \\
          (2^{n} - 1) - N & \text{（当）}N\text{为负数}
      \end{array}\right.
  \end{align*}

为了避免在求补码的过程中做减法运算，通常是先求出 :math:`N` 的反码 :math:`(N)_{\text{INV}}` ，然后在负数的反码上加 $1$ 而得到补码。



8421码又称BCD码，在这种编码方式中，每一位二值代码的 :math:`1` 都代表一个固定数值，将每一位的 :math:`1` 代表的十进制数加起来，得到的结果就是它所代表的十进制数码。由于代码中从左到右每一位的 :math:`1` 分别表示 :math:`8` 、:math:`4` 、:math:`2` 、:math:`1` ，所以将这种代码称为8421码。每一位 :math:`1` 代表的十进制数称为这一位的权。8421码中每一位的权是固定不变的，它属于恒权代码。

余3码如果看作一个4位二进制数，则它的数值要比它所表示的十进制数码多3，故将这种代码称为余3码。在用余3码做十进制加法运算时，若两数之和为10，正好等于二进制数的16，于是便从高位自动产生进位信号；同时对称互为反码的特征也让求取对10的补码更加方便。余3码不是恒权代码，代码中每一位的1所代表的十进制数在各个代码中不能是固定的。

5211码每一位的权正好与8421码十进制计数器4个触发器输出脉冲的分频比相对应。这种对应关系在构成某些数字系统时很有用。

格雷码的每一位状态变化都按一定的顺序循环。自右向左，每一位状态循环中连续的 :math:`0` 、:math:`1` 数目增加一倍。与普通的二进制代码相比，格雷码最大的优点在于当它按照编码顺序依次变化时，相邻两个代码之间只有一位发生变化。这样在代码转换的过程中就不会产生过渡“噪声”。


卡诺图化简法
------------

定义 : 最小项
    一个函数的某个乘积项包含了函数的全部变量，其中每个变量都以原变量或反变量的形式出现，且仅出现一次，则这个乘积称为该函数的一个标准积项，通常称为最小项。



最小项通常用 :math:`m_{i}` 来表示，其中下标 :math:`i` 的确定方式为：把最小项中原变量记为 :math:`1` ，反变量记为 :math:`0` ，当变量顺序确定后，可以按顺序排列成一个二进制数，则与这个二进制数相对应的十进制数就是这个最小项的下标 :math:`i` 。

定义 : 最小项的相邻性
    任何两个最小项如果只有一个因子不同，其他因子都相同，则称这两个最小项为相邻最小项。相邻的两个最小项之和可以合并一项，消去一个变量。


将 :math:`n` 变量的全部最小项各用一个小方块表示，并使具有逻辑相邻性的最小项在几何位置上也相邻地排列起来，所得到的图形称为 $n$ 变量最小项的卡诺图。对于有 :math:`n` 个变量的逻辑函数，其最小项有 :math:`2^{n}` 个，因此该逻辑函数的卡诺图有 :math:`2^{n}` 个小方格。

为了保证图中几何位置的最小项在逻辑上也具有相邻性，图两侧的二进制数码不能按照自然二进制数从小到大地顺序排列，而必须按照格雷码顺序排列，以确保相邻的两个最小项仅有一个变量是不同的。

卡诺图化简法有以下特征：

#. 由最小项表达式确定变量的个数，如果最小项中缺少变量，要利用 :math:`(A+\overline{A})` 的方式补齐。
#. 将卡诺图中的1格画圈，不能漏圈；1格允许被一个以上的圈所包围。
#. 圈的个数应尽可能少，一个圈和一个与项相对应。
#. 圈内格数按照 :math:`2^{k}` 来组合，圈的面积越大越好。
#. 每个圈应至少包含一个新的1格，否则这个圈是多余的。
#. 用卡诺图化简所得到的最简与或式不是唯一的。


约束项和任意项统称为逻辑函数式中的无关项。这里所说的“无关”是指是否把这些最小项写入逻辑函数式无关紧要，可以写入也可以删除。因此无关项在卡诺图对应的位置上既可以填入 :math:`1` ，可以填入 :math:`0` ，用 :math:`X` 来表示。在化简逻辑函数式可以根据需要认为它是 :math:`1` 或 :math:`0` 。




2 门电路
========

模拟电路的处理形式会由于实践过程中的制造工艺分散性、干扰等导致数据异常，所以模拟电路通常只用在整个系统的最前端。模拟电路通过传感器将信息转换为电量之后，就需要进入数字系统。在数字系统当中只传递0和1，但是所付出的代价要么是空间变宽，要么是时间变长。

在电压信号进行数字化的过程中，我们将中间的区域称为无效区。无效区的宽度需要根据实际需求来确定，如果无效区太宽会导致无法有效接收信号，如果无效区太窄会导致噪声明显。在输入发生变化时，电压信号会经过这个无效区，此时电路的输出时不确定的。

两个反向器连用不必去掉，它能够对信号进行整理。所以数字电路就是通过这些信号处理方式，将噪声剔除，确保信息准确高效传递。


CMOS门电路
----------

在CMOS集成电路中，以金属-氧化物-半导体场效应晶体管 [#]_ 作为开关器件。

如图所示的是MOS管的结构示意图和符号。在P型半导体衬底上，制作两个高掺杂浓度的N型区，形成MOS管的源极S(Source)和漏极D(Drain)，第三个电极称为栅极G(Gate)。 [#]_ 

.. figure:: ../_images/MOS管的结构和符号.png
   :align: center

*MOS管的结构和符号*  


如果在漏极和源极之间加上电压 :math:`v_{DS}` ，而令栅极和源极之间的电压 :math:`V_{GS} = 0` ，则由于漏极和源极之间相当于两个PN结背向地串联，所以D-S间不导通， :math:`i_{D} = 0` 。

.. [#] Metal-Oxide-Semiconductor Field-Effect Transistor，简称MOS管。 
.. [#] 栅极通常用金属铝或多晶硅制作。栅极和衬底之间被二氧化硅绝缘层隔开，绝缘层的厚度极薄，在 :math:`0.1 ~\mathrm{\mu m}` 以内。


静态CMOS门是上拉网络（PUN）和下拉网络（PDN）的组合。

定义 : 上拉网络
    上拉网络由PMOS管构成。每当 :math:`F(In_{1},In_{2},\dots,In_{N})=1` 时，它将提供一条在输出和 :math:`V_{\text{DD}}` 之间的通路。

定义 : 下拉网络
    下拉网络由NMOS管构成。每当 :math:`F(In_{1},In_{2},\dots,In_{N})=0` 时，它将提供一条在输出和GND之间的通路。

PUN和PDN网络是以相互排斥的方式构成的：PUN和PDN是对偶网络；实现具有N个输入的逻辑门需要2N个晶体管。在稳定状态时，输出节点总是一个低阻节点。

对于NMOS器件，栅极至源极电压 :math:`V_{\text{GS}}` 必须显著高于通道阈值电压才能完全导通，否则通道的电压将降低。NMOS器件只能发送弱逻辑“1”（高电平），但发送强逻辑“0”（低电平）时不会丢失。

对于PMOS器件，栅极至源极电压 :math:`V_{\text{GS}}` 必须明显小于通道阈值电压才能将其完全关闭，否则电流仍将流过通道。PMOS器件可以无损失地发送强逻辑“1”（高电平），但会发送弱逻辑“0”（低电平）。

CMOS综合了NMOS和PMOS的特点，能够实现双向对称传输，从而接近理想开关。

反门
^^^^^^

.. figure:: ../_images/数字电路/CMOS反相器.png
   :align: center

*Figure CMOS反相器*


与非门（NAND）
^^^^^^^^^^^^^^^

.. figure:: ../_images/数字电路/CMOS与非门.png
   :align: center

*Figure CMOS与非门*


或非门（NOR）
^^^^^^^^^^^^^^^^

.. figure:: ../_images/数字电路/CMOS或非门.png
   :align: center

*Figure CMOS或非门*


异或门（XOR）
^^^^^^^^^^^^^^

通过组合逻辑门可以得到异或门的逻辑效果：

.. figure:: ../_images/数字电路/组合逻辑门得到异或门.png
   :align: center

*Figure 组合逻辑门得到异或门*



直接用CMOS实现复杂组合逻辑
^^^^^^^^^^^^^^^^^^^^^^^^^^

以实现多输入的与非门为例，并不是通过双与门级联来得到的，而是使用场效应管设计，在半导体结构上增加一对场效应管。这样就能使开销线性增加，而不是倍数增加。

.. figure:: ../_images/数字电路/三输入与非门.png
   :align: center

*Figure 三输入与非门*



逻辑门的连接
^^^^^^^^^^^^

* 逻辑门可以互相逐级连接，构成更复杂的逻辑关系；
* 逻辑门的输出可以提供给多个输入，但是需要考虑扇入扇出能力；
* 逻辑门的输入端只能由一个信号驱动，不同逻辑门的输出端不能直接连接，否则可能出现低阻抗通道导致短路。
  

三态门
^^^^^^

三态门是在原来反相器的基础上增加了Enable输入端，可以控制该逻辑门是否发挥作用。

.. figure:: ../_images/数字电路/三态门.png
   :align: center

*Figure 三态门*




数字信号的传递
--------------

即使只是一个反相器来处理信号，电压信号也不是真的像遇到开关一样瞬间变化。真实世界里输出值也不是恒定的，存在一定的变化；真实世界里也不存在无限快的阶跃跳变，总是存在过渡过程的；真实的世界里由于存在干扰和噪声，不能使用单一电平值作为0/1的判据。

数字信号的输入允许范围要比输出定义值要更大，以提供一定的噪声容忍能力。


.. figure:: ../_images/数字电路/数字信号传递的电平约定.png
   :align: center

*Figure 数字信号传递的电平约定*

不同的电平标准，输入输出有效信号范围的具体数值时不同的。不同电平标准的信号互相连接的时候，必须注意其信号范围。必要的时候必须使用电平转换芯片。

开关是有速度的，需要响应时间。提高数字电路主频的方法：改进工艺，缩小晶体管尺寸，降低电容，减少信号传递的距离；降低电压，减少信号变化所需的时间。

定义 : 传播延迟 :math:`t_{\text{pd}}`
    从有效输入到生成有效输出的延迟时间的上限。 :math:`T_{\text{pd}}` 是指从输入到输出的所有路径累积传播延迟的最大值。

定义 : 污染延迟 :math:`t_{\text{cd}}`
    从任何无效输入到生成无效输出的延迟时间的下限。 :math:`T_{\text{cd}}` 是指从输入到输出所有路径累积污染延迟的最小值。

.. figure:: ../_images/数字电路/传播延迟和污染延迟.png
   :align: center

*Figure 传播延迟和污染延迟*



基本SSI逻辑门器件
=================

最常见的是74系列SSI，具有一系列小规模集成电路，提供预制的标准逻辑功能，并且统一封装（左上电源，右下为地），具有不同电气/工艺特性，不同厂商的器件互相兼容。

定义 : 扇入扇出
    逻辑门的输入驱动要求称为扇入值，其输出驱动能力极限称为扇出值。


SSI器件可能多次使用输入引脚的信号，从外部很难判断该引脚信号的逻辑门负载数目，很难计算扇入扇出是否匹配。为了解决这个问题，通过在输入引脚首先进行反向，保证该引脚对外只有该反相器这一个负载，也就是整个引脚对外的扇入值为1。系统设计判断扇入扇出时，只需要数后面连接了多少个引脚，不需要深入了解器件内部对该引脚信号的使用情况。

SSI器件大量使用低电平有效的负逻辑信号，通常用上划线表示。这样设计有以下好处：

* 低电平更容易兼容不同电压标准；
* 半导体器件的灌电流能力强于拉电流能力；
* 低电平信号抗干扰能力更强（低电平就是接地，地是阻抗非常小的参考点；负向干扰很容易被抑制；电源电压不稳定时，高电平电压会波动，但低电平信号不会）。
  

一些常见74基本集成逻辑器件
--------------------------

* 7400——四个二输入与非门
* 7402——四个二输入或非门
* 7404——六个非门
* 7408——四个二输入与门
* 7486——四个异或门
  
.. figure:: ../_images/数字电路/一些常见74基本集成逻辑器件.png
   :align: center

*Figure 一些常见74基本集成逻辑器件*



组合逻辑电路
============

组合逻辑电路（简称组合电路）任意时刻的输出信号仅取决于该时刻的输入信号，与信号作用前电路原来的状态无关（不包含记忆存储原件；不存在输出到输入的反馈回路）。

组合逻辑电路的分析方法（给出逻辑电路到分析功能）一般是下面几个步骤：

#. 根据逻辑图写出逻辑表达式
#. 根据逻辑图/逻辑表达式列出真值表
#. 根据真值表输入输出对应关系，归纳电路逻辑功能（或使用布尔代数定理化简逻辑表达式，归纳逻辑功能）
   

组合逻辑电路的设计方法（给出功能到设计逻辑）一般是下面几个步骤：

#. 根据功能所需，列出输入输出信号对应的真值表达式
#. 根据真值表列出逻辑一般表达式（积之和）
#. 用布尔代数相关定理或卡诺图化简逻辑表达式（根据不同的要求，如最少的门电路或最少的集成电路器件和种类）
#. 根据表达式搭建逻辑电路
   


加法器
---------

.. figure:: ../_images/数字电路/全加器.png
   :align: center

*Figure 全加器*


.. figure:: ../_images/数字电路/4bit加减法器.png
   :align: center

*Figure 4bit加减法器*


**例题** 分析4bit加法器的 :math:`T_{\text{pd}}` 和 :math:`T_{\text{cd}}` 。已知异或门满足 :math:`T_{\text{pd}}=12~\mathrm{ns}` ， :math:`T_{\text{cd}}=2~\mathrm{ns}` ，与门/或门满足 :math:`T_{\text{pd}}=4~\mathrm{ns}` ， :math:`T_{\text{cd}}=1~\mathrm{ns}` 。 

**解** 在寻找最长路径或最短路径时，需要将抽象的1bit加法器拆分为基本的逻辑门，从头到尾分析4bit加法器从输入端到最终输出端的路径情况，而不能仅从1bit加法器计算 :math:`T_{\text{pd}}` 或 :math:`T_{\text{cd}}` 然后乘以倍数来得到。

从四个1bit加法器的逻辑门连接来看，最长的路径是A0-C1-C2-C3-S3，有 :math:`T_{\text{pd}}=12+12+(4\times2)\times3=48~\mathrm{ns}` ；最短路径是B3/A3-C4或C0-S0，均有 :math:`T_{\text{cd}}=2~\mathrm{ns}` 。



超前进位加法器
--------------

之前描述的加法器属于行波进位加法器（Ripple Carry Adder, RCA），其最高位的进位必须等待所有进位计算完毕才能计算出结果。下面讲述超前进位加法器（Lookahead Carry Adder, LCA），它每级进位判断不依赖低级的进位输出，而根据输入信息直接判断。

行波进位加法器的低位全加器的 :math:`C_{\text{out}}` 连接到高一位全加器 :math:`C_{\text{in}}` ，它的电路布局简单，设计方便，但高位的运算必须等待低位的运算完成，延迟时间长。超前进位加法器的每个全加器的进位输入并不来自于前一级的全加器，而是来自超前进位的逻辑，它计算 :math:`C_{i+1}` 的延迟时间固定为三级门延迟，与加法器的位数无关，但是如果进一步拓宽加法器的位数，则电路会变得非常复杂。

要实现超前进位需定义两个变量：进位生成 :math:`G_{i}=X_{i}\cdot Y_{i}` ，进位传播 :math:`P_{i}=X_{i}\oplus Y_{i}` 。那么全加器的逻辑函数可以表示为

.. math::
  \begin{align}
     &S_{i}=X_{i}\oplus Y_{i}\oplus C_{i}=P_{i}\oplus C_{i} \\
     &C_{i+1}=X_{i}\cdot Y_{i}+(X_{i}\oplus Y_{i})\cdot C_{i}=G_{i}+P_{i}C_{i}
  \end{align}

于是4位加法器的每级进位输出逻辑式可以得到改写，变为

.. math::
  \begin{align}
     C_{1} & = G_{0}+P_{0}\cdot C_{0} \\
     C_{2} & = G_{1}+P_{1}\cdot C_{1}=G_{1}+P_{1}\cdot G_{0}+P_{1}\cdot P_{0}\cdot C_{0} \\
     C_{3} & = G_{2}+P_{2}\cdot C_{2}=G_{2}+P_{2}\cdot G_{1}+P_{2}\cdot P_{1}\cdot G_{0}+P_{2}\cdot P_{1}\cdot P_{0}\cdot C_{0} \\
     C_{4} & = G_{3}+P_{3}\cdot C_{3}=G_{3}+P_{3}\cdot G_{2}+P_{3}\cdot P_{2}\cdot G_{1}+P_{3}\cdot P_{2}\cdot P_{1}\cdot G_{0}+P_{3}\cdot P_{2}\cdot P_{1}\cdot P_{0}\cdot C_{0}
  \end{align}


.. figure:: ../_images/数字电路/4bit超前进位加法器.png
   :align: center

*Figure 4bit超前进位加法器*


下面拓展到16位加法器。除了用行波形式拓展，还可以用CLA4作为基本单元，用超前进位方式拓展。 [#]_ 

.. [#] 直接实现更多位的完全超前进位，电流会变得非常复杂。一般用多个小规模的超前进位加法器拼接较大的加法器。

超前进位逻辑的核心，是利用中间变量 :math:`P` 、 :math:`G` 来实现进位： :math:`C_{i+1}=G_{i}+P_{i}C_{i}` 。至于中间变量 :math:`P` 、 :math:`G` 的产生，以 :math:`C_{4}` 为例，其满足

.. math::
  \begin{align}
     C_{4}=G_{3}+P_{3}\cdot C_{3}=G_{3}+P_{3}\cdot G_{2}+P_{3}\cdot P_{2}\cdot G_{1}+P_{3}\cdot P_{2}\cdot P_{1}\cdot G_{0}+P_{3}\cdot P_{2}\cdot P_{1}\cdot P_{0}\cdot C_{0}
  \end{align}

其中 :math:`G_{3}+P_{3}\cdot G_{2}+P_{3}\cdot P_{2}\cdot G_{1}+P_{3}\cdot P_{2}\cdot P_{1}\cdot G_{0}` 的表达形式即为 :math:`G_{m}` ，其中 :math:`P_{3}\cdot P_{2}\cdot P_{1}\cdot P_{0}` 的表达形式即为 :math:`P_{m}` 。

.. figure:: ../_images/数字电路/16bit超前进位加法器.png
   :align: center

*Figure 16bit超前进位加法器*



竞争冒险
--------

所有门电路都会有传输延迟时间（ :math:`t_{\text{pd}}` ），而不同的信号通道之间，信号可能因为传输延迟时间的不同，到达的时间也不同。造成传输延迟时间不同的原因有：

* 不同通道逻辑门的级数不同
* 不同通道逻辑门电路的传输延迟时间不同
* 不同通道电路连线的传输延迟时间不同
  
定义 : 竞争冒险
    经过不同路径产生的信号，由于其到达时刻有先有后，导致输出信号出现多次变化。这种信号时差引起的现象称为 **竞争** 。竞争导致输出出现错误状态，称为出现 **冒险** 。造成错误后果的竞争，为 *临界竞争* ；竞争的结果不导致冒险发现，为 *非临界竞争* 。


对于上述电路， :math:`Y=B\overline{C}+AC` ，如果输入信号恒保持 :math:`A=1; B=1` ，C信号从0变成1然后又从1变成0。那么 :math:`Y` 的电平情况会出现下图所示的变化。在C从1变成0的过程，在传输延迟传递时，存在1降低到低电平后、3跳跃为高电平前的这段时间，这就导致在这段时间同时出现1和3的低电平，最终输出Y为低电平，于是在原本逻辑上应当一直保持高电平的Y输出中出现了低电平毛刺。

.. figure:: ../_images/数字电路/组合逻辑电路的竞争冒险.png
   :align: center

*Figure 组合逻辑电路的竞争冒险*


判断是否竞争冒险现象的方法是：输出端函数在一定条件下会变为下面形式时就会存在竞争冒险

.. math::
  \begin{align}
     &L=A+\overline{A} &&L=A\cdot \overline{A}
  \end{align}

消除竞争冒险现象的方法有：

#. 发现并消除互补变量
#. 修改逻辑设计，增加冗余乘积项
#. 输出端并联电容器（利用了电容器电压不能突变的特性来平滑尖脉冲，会影响输出信号速度，只能用于慢速电路）
#. 引入封锁/选通脉冲（在输出端加入额外控制信号，使输入信号发生变化的时间段内输出状态时确定的。封锁：输入信号变化时，输出端暂时被“关闭”；选通：只有在选通信号有效时，输出才打开）
#. 使用同步逻辑电路（组合逻辑的输入/输出由时序组件提供/存储。时序组件仅在特定时刻才执行动作，只要这个特定时刻和毛刺不同时出现，就可以避免错误状态影响后续逻辑）
   






  























